#!/bin/sh

# Organization: MDIBL
# Author: Lucie Hutchins
# Date: February 2018
#
## Script is called by the Install script 
#  to setup logs and run the dependency test before running the tool's install script
#
# Usage: ./prep_install tool_name
# Where tool_name is the name of the base directory for this tool
# as defined in the variable SHORT_NAME in the tool config file
#
# Example : ./prep_install bamtools 
#

cd `dirname $0`

SCRIPT_NAME=`basename $0`
WORKING_DIR=`pwd`

if [ $# -lt 1 ]
then
  echo "Usage: ./${SCRIPT_NAME} tool_name
  echo "Example: ./${SCRIPT_NAME} bamtools 
  exit 1
fi
TOOL_NAME=$1

##The config file is relative to
# the root directory of pacakage download 

if [ ! -f ${GLOBAL_CONFIG} ]
then
  echo "'${GLOBAL_CONFIG}' file missing under `pwd`" 
  echo "You must run the setup.sh script first to generate this file"
  echo "Usage: ./setup.sh "
  exit 1
fi
source ./${GLOBAL_CONFIG}
PACKAGE_CONFIG_FILE={TOOL_NAME}${PACKAGE_CONFIGFILE_SUFFIX}

source ./${PACKAGE_DEPENDENCIES_FILE}
source ./${PACKAGE_CONFIG_FILE}

PACKAGE_DOWNLOADS_BASE=$EXTERNAL_SOFTWARE_BASE/$SHORT_NAME
RELEASE_FILE=$PACKAGE_DOWNLOADS_BASE/${CURRENT_FLAG_FILE}

RELEASE_NUMBER=`cat $RELEASE_FILE`
RELEASE_DIR=$GIT_REPOS-${RELEASE_NUMBER}

LOCAL_DIR=$PACKAGE_DOWNLOADS_BASE

if [ ! -f ${RELEASE_FILE} ]
then
   echo "File ${RELEASE_FILE} does not exists"
   exit 1
fi

LOG_FILE="${DOWNLOADS_LOG_DIR}/${SCRIPT_NAME}.${SHORT_NAME}.${RELEASE_NUMBER}.log"
PACKAGE_BASE=${LOCAL_DIR}/${GIT_REPOS} 

rm -rf $LOG_FILE
touch $LOG_FILE

rstatus=""
echo "==" | tee -a ${LOG_FILE}
echo "Product: ${GIT_REPOS}" | tee -a ${LOG_FILE}
echo "Install directory: ${PACKAGE_BASE}" | tee -a ${LOG_FILE}
echo "Release version: ${RELEASE_NUMBER}" | tee -a ${LOG_FILE}
echo "Install on Server Name: `uname -n`" | tee -a ${LOG_FILE}
echo "==" | tee -a ${LOG_FILE}
echo "Running the dependency test" | tee -a ${LOG_FILE}
echo "Missing dependencies:" | tee -a ${LOG_FILE}
for dependency in $DEPENDENCIES
do
    token=`which ${dependency}`
    if [ ! -f "${token}" ]
    then
       echo "Dependency: ${dependency}" | tee -a ${LOG_FILE}
       rstatus="Failed"
    fi
done
# Check zLib dependency
for dependency in $LIB_DEPENDENCIES
do
  tokens=`locate $dependency`
  for lib_path in $tokens
  do
    if [ ! -f ${lib_path} ]
    then
      echo "Dependency: ${dependency} - ${lib_path}" | tee -a $LOG_FILE
      rstatus="Failed"
    fi
  done
done
echo "==" | tee -a ${LOG_FILE}
if [ "$rstatus" == Failed ]
then
  echo "Dependency test Failed" | tee -a ${LOG_FILE}
  exit 1
fi
echo "Dependency test passed" | tee -a ${LOG_FILE}
if [ ! -d ${PACKAGE_BASE} ]
then
   echo "Path to ${GIT_REPOS} install directory not correct. See ${PACKAGE_BASE}" | tee -a ${LOG_FILE}
   exit 1
fi
