#!/bin/sh

# Organization: MDIBL
# Author: Lucie Hutchins
# Date: September 2017
#
## Script to build and install a new package
#
# Usage: ./path2/Install tool_name
# Where tool_name is the name of the base directory for this tool
# as defined in the variable SHORT_NAME in the tool config file
#
# Example : ./path2/Install bamtools 
# Different versions of bamtools will be installed under 
# EXTERNAL_SOFTWARE_BASE/bamtools and the current version 
# installed is stored in  EXTERNAL_SOFTWARE_BASE/bamtools/current_release_NUMBER
#

cd `dirname $0`

SCRIPT_NAME=`basename $0`
WORKING_DIR=`pwd`

if [ $# -lt 1 ]
then
  echo "Usage: ./path2/${SCRIPT_NAME} tool_name
  echo "Example: ./${SCRIPT_NAME} bamtools 
  exit 1
fi
TOOL_NAME=$1

##The config file is relative to
# the root directory of pacakage download 

if [ ! -f ${GLOBAL_CONFIG} ]
then
  echo "'${GLOBAL_CONFIG}' file missing under `pwd`" 
  echo "You must run the setup.sh script first to generate this file"
  echo "Usage: ./setup.sh "
  exit 1
fi
source ./${GLOBAL_CONFIG}
PACKAGE_CONFIG_FILE={TOOL_NAME}${PACKAGE_CONFIGFILE_SUFFIX}

source ./${PACKAGE_DEPENDENCIES_FILE}
source ./${PACKAGE_CONFIG_FILE}

if [ ! -f ${RELEASE_FILE} ]
then
   echo "File ${RELEASE_FILE} does not exists"
   exit 1
fi

LOG_FILE="${DOWNLOADS_LOG_DIR}/${SCRIPT_NAME}.${SHORT_NAME}.${RELEASE_NUMBER}.log"
PACKAGE_BASE=${LOCAL_DIR}/${GIT_REPOS} 

rm -rf $LOG_FILE
touch $LOG_FILE

rstatus=""
echo "==" | tee -a ${LOG_FILE}
echo "Product: ${GIT_REPOS}" | tee -a ${LOG_FILE}
echo "Install directory: ${PACKAGE_BASE}" | tee -a ${LOG_FILE}
echo "Release version: ${RELEASE_NUMBER}" | tee -a ${LOG_FILE}
echo "Install on Server Name: `uname -n`" | tee -a ${LOG_FILE}
echo "==" | tee -a ${LOG_FILE}
echo "Running the dependency test" | tee -a ${LOG_FILE}
echo "Missing dependencies:" | tee -a ${LOG_FILE}
for dependency in $DEPENDENCIES
do
    token=`which ${dependency}`
    if [ ! -f "${token}" ]
    then
       echo "Dependency: ${dependency}" | tee -a ${LOG_FILE}
       rstatus="Failed"
    fi
done
# Check zLib dependency
for dependency in $LIB_DEPENDENCIES
do
  tokens=`locate $dependency`
  for lib_path in $tokens
  do
    if [ ! -f ${lib_path} ]
    then
      echo "Dependency: ${dependency} - ${lib_path}" | tee -a $LOG_FILE
      rstatus="Failed"
    fi
  done
done
echo "==" | tee -a ${LOG_FILE}
if [ "$rstatus" == Failed ]
then
  echo "Dependency test Failed" | tee -a ${LOG_FILE}
  exit 1
fi
echo "Dependency test passed" | tee -a ${LOG_FILE}

# Execute the Install command for this package
if [ ! -d ${PACKAGE_BASE} ]
then
   echo "Path to ${GIT_REPOS} install directory not correct. See ${PACKAGE_BASE}" | tee -a ${LOG_FILE}
   exit 1
fi
##### Shared ends here #########
cd ${PACKAGE_BASE}
mkdir build 
if [ ! -d build ]
then
   echo "Could not create the 'build' directory under `pwd`" | tee -a ${LOG_FILE}
   exit 1
fi
# Run the install commands
cd build
cmake -DCMAKE_INSTALL_PREFIX=${PACKAGE_BASE} .. 2>&1 | tee -a ${LOG_FILE}
make 2>&1 | tee -a ${LOG_FILE}
make install 2>&1 | tee -a ${LOG_FILE}

##### Shared starts ###########################
cd ${PACKAGE_BASE}
#Check the install
rstatus="SUCCESS"
for folder in ${DIR_CHECK}
do
    if [ ! -d ${PACKAGE_BASE}/${folder} ]
    then
       echo "${PACKAGE_BASE}/${folder} missing" | tee -a ${LOG_FILE}
       rstatus="FAILED"
     fi
done

if [ "${rstatus}" == FAILED ]
then
   echo "${rstatus}" | tee -a ${LOG_FILE}
   exit 1
fi
echo ${rstatus} | tee -a ${LOG_FILE}
####### shared ends #####################
## Copy the excutable to the path  -- specific to bamtools install ## 
RELEASE_NUMBER=`echo ${RELEASE_NUMBER}| sed -e 's/^v//'`
cd ${PACKAGE_BASE}/${BIN_DIR}
if [ -f $BIN_FILE ]
then
   cp -p ${BIN_FILE} ${SOFTWARE_BASE}/${BIN_DIR}/${BIN_FILE}-${RELEASE_NUMBER}
   cd ${SOFTWARE_BASE}/${BIN_DIR}
   rm -f ${BIN_FILE}
   ln -s ${BIN_FILE}-${RELEASE_NUMBER} ${BIN_FILE}
fi
echo "${BIN_FILE} copied to ${SOFTWARE_BASE}/${BIN_DIR}" | tee -a ${LOG_FILE
## Copy the include to the path 
cd ${PACKAGE_BASE}/${INCLUDE_DIR}
if [ -d ${INCLUDE_DIR_NAME} ]
then
   cp -pR ${INCLUDE_DIR_NAME}  ${SOFTWARE_BASE}/${INCLUDE_DIR}/${INCLUDE_DIR_NAME}-${RELEASE_NUMBER}
   cd ${SOFTWARE_BASE}/${INCLUDE_DIR}
   [ -f ${INCLUDE_DIR_NAME} ] && rm -f ${INCLUDE_DIR_NAME}
   ln -s ${INCLUDE_DIR_NAME}-${RELEASE_NUMBER} ${INCLUDE_DIR_NAME}
fi
echo "${INCLUDE_DIR_NAME} copied to ${SOFTWARE_BASE}/${INCLUDE_DIR}" | tee -a $LOG_FILE} 
## Copy libs to the path 
cd ${PACKAGE_BASE}/${LIB_DIR}
if [ -d ${LIB_PACKG_CFG} ]
then
   cp -pR ${LIB_PACKG_CFG}  ${SOFTWARE_BASE}/${LIB_DIR}/${GIT_REPOS}-${LIB_PACKG_CFG}-${RELEASE_NUMBER}
   cd  ${SOFTWARE_BASE}/${LIB_DIR}
   [ -f ${LIB_PACKG_CFG} ] && rm -f  ${SOFTWARE_BASE}/${LIB_DIR}/$LIB_PACKG_CFG
   ln -s ${GIT_REPOS}-${LIB_PACKG_CFG}-${RELEASE_NUMBER} ${LIB_PACKG_CFG}
fi
echo "${LIB_PACKG_CFG} copied to ${SOFTWARE_BASE}/${LIB_DIR}" | tee -a ${LOG_FILE}

cd ${PACKAGE_BASE}/${LIB_DIR}
if [ -f ${LIB_FILE} ]
then
   cp -p ${LIB_FILE}  ${SOFTWARE_BASE}/${LIB_DIR}/${LIB_FILE}-${RELEASE_NUMBER}
   [ -f  ${SOFTWARE_BASE}/${LIB_DIR}/${LIB_FILE} ] && rm -f  ${SOFTWARE_BASE}/${LIB_DIR}/${LIB_FILE}
   cd  ${SOFTWARE_BASE}/${LIB_DIR}
   ln -s ${LIB_FILE}-${RELEASE_NUMBER} ${LIB_FILE}
fi
echo "${LIB_FILE} copied to  ${SOFTWARE_BASE}/${LIB_DIR}" | tee -a ${LOG_FILE}
exit 0

